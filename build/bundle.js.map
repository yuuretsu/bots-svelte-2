{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte-icons/components/IconBase.svelte","../../node_modules/svelte-icons/md/MdAdd.svelte","../../src/components/Accordion.svelte","../../src/components/DragWrapper.svelte","../../src/components/Sidebar.svelte","../../node_modules/svelte-icons/md/MdMenu.svelte","../../node_modules/svelte-icons/md/MdClose.svelte","../../node_modules/svelte-icons/md/MdPlayArrow.svelte","../../node_modules/svelte-icons/md/MdPause.svelte","../../node_modules/svelte-icons/md/MdSkipNext.svelte","../../src/components/IconSwitch.svelte","../../src/components/ControlsPanel.svelte","../../src/lib/helpers.ts","../../src/lib/grid.ts","../../src/lib/pixels.ts","../../src/components/SquareWorld.svelte","../../src/lib/color.ts","../../src/lib/world.ts","../../src/lib/world-block.ts","../../node_modules/svelte/store/index.mjs","../../src/components/App.svelte","../../src/index.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.0' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script>\n  export let title = null;\n  export let viewBox;\n</script>\n\n<style>\n  svg {\n    stroke: currentColor;\n    fill: currentColor;\n    stroke-width: 0;\n    width: 100%;\n    height: auto;\n    max-height: 100%;\n  }  \n</style>\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" {viewBox}>\n  {#if title}\n    <title>{title}</title>\n  {/if}\n  <slot />\n</svg>\n","<script>\n        import IconBase from '../components/IconBase.svelte';\n        </script>\n        <IconBase viewBox=\"0 0 24 24\" {...$$props}>\n          <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" />\n        </IconBase>\n      ","<script>\n  import MdAdd from \"svelte-icons/md/MdAdd.svelte\";\n\n  export let title;\n  export let opened = false;\n</script>\n\n<div class=\"accordion\" class:opened>\n  <label class=\"header\" class:opened>\n    <input class=\"visually-hidden\" type=\"checkbox\" bind:checked={opened} />\n    <span class=\"title\">{title}</span>\n    <div class=\"icon header__icon\" class:opened>\n      <MdAdd />\n    </div>\n  </label>\n  {#if opened}\n    <div class=\"body\">\n      <slot />\n    </div>\n  {/if}\n</div>\n\n<style>\n  .accordion {\n    border-radius: 10px;\n  }\n  .accordion.opened {\n    box-shadow: var(--shadow);\n  }\n  .header {\n    display: flex;\n    justify-content: space-between;\n    box-sizing: border-box;\n    cursor: pointer;\n    height: 20px;\n    align-items: center;\n    user-select: none;\n    background-color: transparent;\n    border-radius: 10px;\n    font-weight: bold;\n    transition: height 0.2s, padding 0.2s;\n  }\n  .header.opened {\n    height: 40px;\n    padding: 0 10px;\n    background-color: var(--col-bg-1);\n  }\n  .header.opened:hover {\n    background-color: var(--col-bg-2);\n  }\n  .header__icon {\n    margin-left: 10px;\n  }\n\n  .title {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  .icon {\n    --col-bg: var(--col-bg-1);\n    min-width: 20px;\n    min-height: 20px;\n    max-width: 20px;\n    max-height: 20px;\n    border-radius: 10px;\n    background-color: var(--col-bg);\n    box-shadow: 0 0 0 3px var(--col-bg);\n    transform: translateX(-3px);\n    transition: 0.2s;\n  }\n  .icon.opened {\n    --col-bg: transparent;\n    transform: rotate(45deg);\n  }\n  .header:not(.header.opened):hover .icon {\n    --col-bg: var(--col-bg-2);\n  }\n\n  .body {\n    padding: 10px;\n  }\n\n  @keyframes anim {\n    from {\n      opacity: 0;\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  export let height: string = \"auto\";\n  export let currentPos: [number, number] = [0, 0];\n  function onMouseDown(e: MouseEvent) {\n    initPos = [e.clientX - currentPos[0], e.clientY - currentPos[1]];\n    onMouseMove = mouseMoveInner;\n    onMouseUp = clearMouseEvents;\n  }\n  function mouseMoveInner(e: MouseEvent) {\n    e.preventDefault();\n    currentPos = [e.clientX - initPos[0], e.clientY - initPos[1]];\n    document.body.style.cursor = \"grabbing\";\n  }\n  function clearMouseEvents() {\n    onMouseMove = undefined;\n    onMouseUp = undefined;\n    document.body.style.cursor = \"\";\n    if (!document.body.getAttribute(\"style\"))\n      document.body.removeAttribute(\"style\");\n  }\n  function onTouchStart(e: TouchEvent) {\n    let x = e.touches[0]?.clientX || 0;\n    let y = e.touches[0]?.clientY || 0;\n    initPos = [x - currentPos[0], y - currentPos[1]];\n    onTouchMove = touchMoveInner;\n    onTouchEnd = clearTouchEvents;\n  }\n  function touchMoveInner(e: TouchEvent) {\n    currentPos = [\n      e.touches[0]!.clientX - initPos[0],\n      e.touches[0]!.clientY - initPos[1],\n    ];\n  }\n  function clearTouchEvents() {\n    onTouchMove = undefined;\n    onTouchEnd = undefined;\n  }\n  let onMouseMove: svelte.JSX.MouseEventHandler<Window> | undefined;\n  let onMouseUp: svelte.JSX.MouseEventHandler<Window> | undefined;\n  let onTouchMove: svelte.JSX.TouchEventHandler<Window> | undefined;\n  let onTouchEnd: svelte.JSX.TouchEventHandler<Window> | undefined;\n  let initPos: [number, number] = [0, 0];\n</script>\n\n<svelte:window\n  on:mousemove={onMouseMove}\n  on:mouseup={onMouseUp}\n  on:touchmove={onTouchMove}\n  on:touchend={onTouchEnd}\n/>\n<div\n  class=\"drag-wrapper\"\n  style={`height: ${height}`}\n  on:mousedown={onMouseDown}\n  on:touchstart={onTouchStart}\n>\n  <div style={`transform: translate(${currentPos[0]}px, ${currentPos[1]}px);`}>\n    <slot />\n  </div>\n</div>\n\n<style>\n  .drag-wrapper {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    touch-action: none;\n    overflow: hidden;\n    background-color: var(--col-bg-1);\n    /* box-shadow: inset 0 0 0 1px green, inset 0 0 0 2px red; */\n  }\n</style>\n","<script>\n  export let opened = true;\n</script>\n\n<div class=\"sidebar\" class:opened>\n  <slot />\n</div>\n\n<style>\n  .sidebar {\n    position: fixed;\n    left: -300px;\n    top: 0px;\n    width: 300px;\n    height: 100%;\n    overflow-y: auto;\n    background-color: var(--col-bg-0);\n    color: var(--col-fg-0);\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);\n    padding: 20px;\n    padding-top: calc(20px * 2 + 50px);\n    padding-bottom: 0;\n    /* backdrop-filter: blur(4px);\n    -webkit-backdrop-filter: blur(4px); */\n    -ms-overflow-style: none; /* IE and Edge */\n    scrollbar-width: none; /* Firefox */\n    /* opacity: 0; */\n    transition: 0.2s;\n  }\n\n  .sidebar::-webkit-scrollbar {\n    display: none;\n  }\n\n  :global(.sidebar > *:last-child) {\n    margin-bottom: 20px;\n  }\n\n  :global(.sidebar > *) {\n    margin-bottom: 20px;\n  }\n\n  .opened {\n    left: 0;\n    /* max-height: 100px; */\n    opacity: 1;\n  }\n</style>\n","<script>\n        import IconBase from '../components/IconBase.svelte';\n        </script>\n        <IconBase viewBox=\"0 0 24 24\" {...$$props}>\n          <path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\" />\n        </IconBase>\n      ","<script>\n        import IconBase from '../components/IconBase.svelte';\n        </script>\n        <IconBase viewBox=\"0 0 24 24\" {...$$props}>\n          <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n        </IconBase>\n      ","<script>\n        import IconBase from '../components/IconBase.svelte';\n        </script>\n        <IconBase viewBox=\"0 0 24 24\" {...$$props}>\n          <path d=\"M8 5v14l11-7z\" />\n        </IconBase>\n      ","<script>\n        import IconBase from '../components/IconBase.svelte';\n        </script>\n        <IconBase viewBox=\"0 0 24 24\" {...$$props}>\n          <path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\" />\n        </IconBase>\n      ","<script>\n        import IconBase from '../components/IconBase.svelte';\n        </script>\n        <IconBase viewBox=\"0 0 24 24\" {...$$props}>\n          <path d=\"M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z\" />\n        </IconBase>\n      ","<script lang=\"ts\">\n  export let width: string;\n  export let height = width;\n  export let switched = false;\n\n  let style = `width: ${width}; height: ${height};`;\n</script>\n\n<div class=\"icon-switch\" {style}>\n  <div class=\"icon-switch__inner\" class:switched>\n    <div class=\"icon\" class:hidden={switched}>\n      <slot name=\"a\" />\n    </div>\n    <div class=\"icon\" class:hidden={!switched}>\n      <slot name=\"b\" />\n    </div>\n  </div>\n</div>\n\n<style>\n  .icon-switch {\n    /* width: 25px;\n    height: 25px; */\n    overflow: hidden;\n    /* background-color: red; */\n    border-radius: 5px;\n  }\n\n  .icon {\n    transition-property: transform, opacity;\n    transition-duration: 0.2s;\n    transition-timing-function: ease-in-out;\n  }\n\n  .icon.hidden {\n    opacity: 0;\n    transform: scale(0);\n  }\n\n  .icon-switch__inner {\n    display: flex;\n    flex-direction: column;\n    transition-duration: 0.2s;\n    transition-timing-function: ease-in-out;\n  }\n\n  .icon-switch__inner.switched {\n    transform: translateY(-50%);\n  }\n</style>\n","<script lang=\"ts\">\n  import MdMenu from \"svelte-icons/md/MdMenu.svelte\";\n  import MdClose from \"svelte-icons/md/MdClose.svelte\";\n  import MdPlayArrow from \"svelte-icons/md/MdPlayArrow.svelte\";\n  import MdPause from \"svelte-icons/md/MdPause.svelte\";\n  import MdSkipNext from \"svelte-icons/md/MdSkipNext.svelte\";\n\n  import { createEventDispatcher } from \"svelte\";\n\n  import IconSwitch from \"./IconSwitch.svelte\";\n\n  function onClickMenu() {\n    sidebarOpened = !sidebarOpened;\n  }\n\n  function onClickPlayPause() {\n    play = !play;\n  }\n\n  function onClickStep() {\n    dispatch(\"step\");\n  }\n\n  export let sidebarOpened: boolean;\n  export let play: boolean;\n\n  const dispatch = createEventDispatcher();\n</script>\n\n<div class=\"wrapper\">\n  <button class=\"btn\" on:click={onClickMenu}>\n    <IconSwitch width=\"25px\" switched={sidebarOpened}>\n      <div class=\"icon\" slot=\"a\">\n        <span class=\"visually-hidden\">open menu</span>\n        <MdMenu />\n      </div>\n      <div class=\"icon\" slot=\"b\">\n        <span class=\"visually-hidden\">close menu</span>\n        <MdClose />\n      </div>\n    </IconSwitch>\n  </button>\n  <button class=\"btn\" on:click={onClickPlayPause}>\n    <IconSwitch width=\"25px\" switched={play}>\n      <div class=\"icon\" slot=\"a\">\n        <span class=\"visually-hidden\">open menu</span>\n        <MdPlayArrow />\n      </div>\n      <div class=\"icon\" slot=\"b\">\n        <span class=\"visually-hidden\">close menu</span>\n        <MdPause />\n      </div>\n    </IconSwitch>\n  </button>\n  <button class=\"btn\" on:click={onClickStep}>\n    <div class=\"icon\">\n      <MdSkipNext />\n    </div>\n  </button>\n</div>\n\n<style>\n  .wrapper {\n    position: fixed;\n    display: flex;\n    left: 20px;\n    top: 20px;\n    padding: 10px;\n    background-color: var(--col-bg-1);\n    /* backdrop-filter: blur(5px);\n    -webkit-backdrop-filter: blur(5px); */\n    border-radius: 100px;\n    box-shadow: var(--shadow);\n  }\n\n  .btn {\n    display: block;\n    border: none;\n    padding: 5px;\n    border-radius: 50px;\n    cursor: pointer;\n    background-color: var(--col-bg-2);\n    color: var(--col-fg-0);\n  }\n\n  .btn:not(:last-child) {\n    margin-right: 10px;\n  }\n\n  .icon {\n    max-width: 25px;\n    max-height: 25px;\n    min-width: 25px;\n    min-height: 25px;\n    transition-duration: 0.2s;\n  }\n\n  .btn:active .icon {\n    transform: scale(0.75);\n  }\n</style>\n","export function randFloat(bottom, top, rand = Math.random) {\n    return rand() * (top - bottom) + bottom;\n}\nexport function randInt(bottom, top, rand = Math.random) {\n    return Math.floor(randFloat(bottom, top, rand));\n}\nexport function randChoice(arr, rand = Math.random) {\n    return arr[randInt(0, arr.length, rand)];\n}\nexport function fixNumber(min, max, number) {\n    return number >= min\n        ? number % max\n        : max - (-number % max);\n}\nexport function normalizeNumber(min, max, number) {\n    return (number - min) / (max - min);\n}\nexport function limit(min, max, number) {\n    return Math.max(Math.min(number, max), min);\n}\nexport function lerp(a, b, t) {\n    return a + (b - a) * t;\n}\n","import { fixNumber, randInt } from \"./helpers\";\nexport class Grid {\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n        this.cells = new Array(width);\n        for (let x = 0; x < width; x++) {\n            this.cells[x] = new Array(height).fill(undefined);\n        }\n    }\n    fixCoords(x, y) {\n        return [\n            fixNumber(0, this.width, x),\n            fixNumber(0, this.height, y),\n        ];\n    }\n    randCoords() {\n        return [\n            randInt(0, this.width),\n            randInt(0, this.height)\n        ];\n    }\n    randEmpty() {\n        let coords;\n        do {\n            coords = this.randCoords();\n        } while (this.get(...coords));\n        return coords;\n    }\n    fill(value) {\n        this.cells.map(column => column.fill(value));\n        return this;\n    }\n    get(x, y) {\n        return this.cells[x][y];\n    }\n    getOr(x, y, value) {\n        const here = this.cells[x][y];\n        return here !== undefined\n            ? here\n            : value;\n    }\n    set(x, y, value) {\n        this.cells[x][y] = value;\n    }\n    remove(x, y) {\n        delete this.cells[x][y];\n    }\n    swap(x, y, x2, y2) {\n        const bufferA = this.get(x, y);\n        const bufferB = this.get(x2, y2);\n        this.set(x, y, bufferB);\n        this.set(x2, y2, bufferA);\n    }\n    forEach(func) {\n        for (let x = 0; x < this.width; x++) {\n            for (let y = 0; y < this.height; y++) {\n                func(this.get(x, y), x, y);\n            }\n        }\n    }\n    map(func) {\n        const next = new Grid(this.width, this.height);\n        this.forEach((value, x, y) => {\n            next.set(x, y, func(value, x, y));\n        });\n        return next;\n    }\n    flat() {\n        return Array.prototype.concat.apply([], this.cells);\n    }\n}\n","export class Pixels extends ImageData {\n    constructor(width, height) {\n        super(width, height);\n    }\n    setPixel(x, y, r, g, b, a) {\n        const pointer = (x + y * this.width) * 4;\n        this.data[pointer] = r;\n        this.data[pointer + 1] = g;\n        this.data[pointer + 2] = b;\n        this.data[pointer + 3] = a;\n        return this;\n    }\n    getPixel(x, y) {\n        const pointer = (x + y * this.width) * 4;\n        return [\n            this.data[pointer],\n            this.data[pointer + 1],\n            this.data[pointer + 2],\n            this.data[pointer + 3]\n        ];\n    }\n}\n","<script lang=\"ts\">\n  import { afterUpdate } from \"svelte\";\n\n  export let imageData: ImageData;\n  export let pixelSize = 5;\n\n  let canvas: HTMLCanvasElement;\n\n  afterUpdate(() => {\n    canvas.width = imageData.width * pixelSize;\n    canvas.height = imageData.height * pixelSize;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    ctx.imageSmoothingEnabled = false;\n    const tmpCanvas = document.createElement(\"canvas\");\n    tmpCanvas.width = imageData.width;\n    tmpCanvas.height = imageData.height;\n    const tmpCtx = tmpCanvas.getContext(\"2d\");\n    if (!tmpCtx) return;\n    tmpCtx.putImageData(imageData, 0, 0);\n    ctx.drawImage(tmpCanvas, 0, 0, canvas.width, canvas.height);\n  });\n</script>\n\n<canvas bind:this={canvas} />\n\n<style>\n  canvas {\n    display: block;\n    background-color: var(--col-bg-0);\n    border-radius: 5px;\n    box-shadow: var(--shadow);\n  }\n</style>\n","import { lerp, randInt } from \"./helpers\";\nexport class Rgba {\n    constructor(red, green, blue, alpha) {\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n        this.alpha = alpha;\n    }\n    static randRgb(rand = Math.random) {\n        return new Rgba(randInt(0, 256, rand), randInt(0, 256, rand), randInt(0, 256, rand), 255);\n    }\n    interpolate(other, t, fn = lerp) {\n        return new Rgba(fn(this.red, other.red, t), fn(this.green, other.green, t), fn(this.blue, other.blue, t), fn(this.alpha, other.alpha, t));\n    }\n    toArray() {\n        return [this.red, this.green, this.blue, this.alpha];\n    }\n}\nRgba.MAX_DIF = 255 * 4;\n","import { Grid } from \"./grid\";\nimport { Pixels } from \"./pixels\";\nimport SquareWorldComponent from \"./../components/SquareWorld.svelte\";\nimport { Rgba } from \"./color\";\nexport class World extends Grid {\n    constructor(width, height) {\n        super(width, height);\n    }\n}\nexport class SquareWorld extends World {\n    step() {\n        const blocks = [];\n        this.forEach((value, x, y) => {\n            if (!value)\n                return;\n            blocks.push({ block: value, pos: [x, y] });\n        });\n        const shuffled = blocks.sort(() => Math.random() - 0.5);\n        shuffled.forEach(({ block, pos }) => block.live(pos, this));\n    }\n    getPixels() {\n        const pixels = new Pixels(this.width, this.height);\n        this.forEach((block, x, y) => {\n            if (!block)\n                return;\n            pixels.setPixel(x, y, ...(block.getColor() || new Rgba(0, 0, 0, 0))\n                .toArray());\n        });\n        return pixels;\n    }\n    getComponentProps() {\n        return { imageData: this.getPixels(), pixelSize: 4 };\n    }\n    getComponent() {\n        return SquareWorldComponent;\n    }\n}\nconst SQUARE_MOORE_NEIGHBOURHOOD = [\n    [-1, -1],\n    [0, -1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n    [0, 1],\n    [-1, 1],\n    [-1, 0],\n];\n","import { Rgba } from \"./color\";\nexport class WorldBlock {\n    constructor() {\n        this.rgba = Rgba.randRgb();\n    }\n    live(pos, world) {\n        const coords = world.fixCoords(pos[0], pos[1] + 1);\n        const obj = world.get(...coords);\n        if (obj || Math.random() > 0.5)\n            return;\n        world.swap(...pos, ...coords);\n    }\n    getColor() {\n        return this.rgba;\n    }\n}\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","<script lang=\"ts\">\n  import Accordion from \"./Accordion.svelte\";\n  import DragWrapper from \"./DragWrapper.svelte\";\n  import Sidebar from \"./Sidebar.svelte\";\n  import ControlsPanel from \"./ControlsPanel.svelte\";\n\n  import { SquareWorld, World } from \"../lib/world\";\n  import { WorldBlock } from \"../lib/world-block\";\n  import { onDestroy } from \"svelte\";\n  import { writable } from \"svelte/store\";\n\n  function step() {\n    world.step();\n    worldProps = world.getComponentProps();\n  }\n\n  function onClickStep() {\n    step();\n    $play = false;\n  }\n\n  function stopLoop(intervalId: number | null) {\n    intervalId && window.clearInterval(intervalId);\n  }\n\n  function onSetPlay() {\n    if ($play) {\n      intervalId = window.setInterval(() => {\n        step();\n      }, 1000 / 60);\n    } else {\n      stopLoop(intervalId);\n    }\n  }\n\n  let sidebarOpened = true;\n  let intervalId: number | null = null;\n  let play = writable(true);\n  play.subscribe(onSetPlay);\n\n  let world: World = new SquareWorld(100, 100);\n  for (let y = 0; y < world.height; y++) {\n    for (let x = 0; x < world.width; x++) {\n      Math.random() > 0.1 && world.set(x, y, new WorldBlock());\n    }\n  }\n  let worldProps = world.getComponentProps();\n\n  let showCss = false;\n\n  onDestroy(stopLoop.bind(null, intervalId));\n</script>\n\n<svelte:window\n  on:resize={() => {\n    const landscape = window.matchMedia(\"(orientation: landscape)\").matches;\n    if (landscape) {\n      document.body.classList.add(\"static\");\n    } else {\n      document.body.classList.remove(\"static\");\n    }\n  }}\n/>\n<main class:show-css={showCss}>\n  <div class=\"drag-wrapper-wrapper\" class:open={sidebarOpened}>\n    <DragWrapper height=\"100%\">\n      <svelte:component this={world.getComponent()} {...worldProps} />\n    </DragWrapper>\n  </div>\n  <Sidebar opened={sidebarOpened}>\n    <button on:click={onClickStep}>step</button>\n    <Accordion title=\"kek dfg sdgfsdf fsd kek dfg sdgfsdf fsd\">\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aut aperiam\n        quos, consequatur esse nostrum omnis mollitia laboriosam, adipisci\n        expedita, porro quas necessitatibus qui tempora fugiat. Dignissimos ab\n        incidunt eveniet sequi!\n      </p>\n    </Accordion>\n    <Accordion title=\"dev\">\n      <label\n        ><input type=\"checkbox\" bind:checked={showCss} />Показать сетку</label\n      >\n    </Accordion>\n  </Sidebar>\n  <ControlsPanel bind:sidebarOpened bind:play={$play} on:step={onClickStep} />\n</main>\n\n<style>\n  main {\n    position: fixed;\n    inset: 0;\n  }\n  .drag-wrapper-wrapper {\n    height: 100%;\n    transition-duration: 0.2s;\n  }\n  .drag-wrapper-wrapper.open {\n    margin-left: 300px;\n  }\n  :global(.show-css *) {\n    outline: 1px solid rgba(0, 0, 0, 0.1) !important;\n  }\n  @media (prefers-color-scheme: dark) {\n    :global(.show-css *) {\n      outline: 1px solid rgba(255, 255, 255, 0.1) !important;\n    }\n  }\n</style>\n","import App from './components/App.svelte';\nexport default new App({ target: document.body });\n"],"names":["noop","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","p","get_all_dirty_from_scope","exclude_internal_props","props","result","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","toggle_class","toggle","classList","current_component","set_current_component","get_current_component","Error","createEventDispatcher","type","detail","bubbles","e","createEvent","initCustomEvent","custom_event","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","add_flush_callback","flushing","seen_callbacks","Set","flush","update","pop","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","d","globals","window","globalThis","global","get_spread_update","levels","updates","to_null_out","accounted_for","n","key","get_spread_object","spread_props","bind","index","bound","create_component","mount_component","customElement","on_mount","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","append_styles","parent_component","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","indexOf","splice","$set","$$props","obj","$$set","keys","title","viewBox","opened","onMouseMove","onMouseUp","onTouchMove","onTouchEnd","height","currentPos","mouseMoveInner","preventDefault","clientX","initPos","clientY","body","style","cursor","clearMouseEvents","touchMoveInner","touches","clearTouchEvents","x","_a","y","_b","width","switched","sidebarOpened","play","dispatch","randInt","bottom","top","rand","random","floor","randFloat","fixNumber","min","number","lerp","t","Grid","constructor","cells","fixCoords","randCoords","randEmpty","coords","get","column","getOr","here","set","remove","swap","x2","y2","bufferA","bufferB","func","next","flat","prototype","concat","apply","Pixels","ImageData","super","setPixel","g","pointer","getPixel","canvas","imageData","pixelSize","getContext","imageSmoothingEnabled","tmpCanvas","tmpCtx","putImageData","drawImage","Rgba","red","green","blue","alpha","static","interpolate","other","toArray","MAX_DIF","World","SquareWorld","step","blocks","pos","sort","live","getPixels","pixels","getColor","getComponentProps","getComponent","SquareWorldComponent","WorldBlock","rgba","randRgb","world","subscriber_queue","stopLoop","intervalId","clearInterval","worldProps","start","stop","subscribers","new_value","run_queue","subscriber","invalidate","size","writable","$play","setInterval","showCss","matchMedia","matches"],"mappings":"gCAAA,SAASA,KAET,SAASC,EAAOC,EAAKC,GAEjB,IAAK,MAAMC,KAAKD,EACZD,EAAIE,GAAKD,EAAIC,GACjB,OAAOF,EAUX,SAASG,EAAIC,GACT,OAAOA,IAEX,SAASC,IACL,OAAOC,OAAOC,OAAO,MAEzB,SAASC,EAAQC,GACbA,EAAIC,QAAQP,GAEhB,SAASQ,EAAYC,GACjB,MAAwB,mBAAVA,EAElB,SAASC,EAAeC,EAAGC,GACvB,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAOD,GAAkB,iBAANA,GAAgC,mBAANA,EAiChF,SAASE,EAAoBC,EAAWC,EAAOC,GAC3CF,EAAUG,GAAGC,WAAWC,KAb5B,SAAmBJ,KAAUK,GACzB,GAAa,MAATL,EACA,OAAOpB,EAEX,MAAM0B,EAAQN,EAAMO,aAAaF,GACjC,OAAOC,EAAME,YAAc,IAAMF,EAAME,cAAgBF,EAQ1BC,CAAUP,EAAOC,IAElD,SAASQ,EAAYC,EAAYC,EAAKC,EAAS1B,GAC3C,GAAIwB,EAAY,CACZ,MAAMG,EAAWC,EAAiBJ,EAAYC,EAAKC,EAAS1B,GAC5D,OAAOwB,EAAW,GAAGG,IAG7B,SAASC,EAAiBJ,EAAYC,EAAKC,EAAS1B,GAChD,OAAOwB,EAAW,IAAMxB,EAClBL,EAAO+B,EAAQD,IAAII,QAASL,EAAW,GAAGxB,EAAGyB,KAC7CC,EAAQD,IAElB,SAASK,EAAiBN,EAAYE,EAASK,EAAO/B,GAClD,GAAIwB,EAAW,IAAMxB,EAAI,CACrB,MAAMgC,EAAOR,EAAW,GAAGxB,EAAG+B,IAC9B,QAAsBE,IAAlBP,EAAQK,MACR,OAAOC,EAEX,GAAoB,iBAATA,EAAmB,CAC1B,MAAME,EAAS,GACTC,EAAMC,KAAKC,IAAIX,EAAQK,MAAMO,OAAQN,EAAKM,QAChD,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAKI,GAAK,EAC1BL,EAAOK,GAAKb,EAAQK,MAAMQ,GAAKP,EAAKO,GAExC,OAAOL,EAEX,OAAOR,EAAQK,MAAQC,EAE3B,OAAON,EAAQK,MAEnB,SAASS,EAAiBC,EAAMC,EAAiBjB,EAAKC,EAASiB,EAAcC,GACzE,GAAID,EAAc,CACd,MAAME,EAAejB,EAAiBc,EAAiBjB,EAAKC,EAASkB,GACrEH,EAAKK,EAAED,EAAcF,IAO7B,SAASI,EAAyBrB,GAC9B,GAAIA,EAAQD,IAAIa,OAAS,GAAI,CACzB,MAAMP,EAAQ,GACRO,EAASZ,EAAQD,IAAIa,OAAS,GACpC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQC,IACxBR,EAAMQ,IAAM,EAEhB,OAAOR,EAEX,OAAQ,EAEZ,SAASiB,EAAuBC,GAC5B,MAAMC,EAAS,GACf,IAAK,MAAMpD,KAAKmD,EACC,MAATnD,EAAE,KACFoD,EAAOpD,GAAKmD,EAAMnD,IAC1B,OAAOoD,EA2LX,SAASC,EAAOC,EAAQC,GACpBD,EAAOE,YAAYD,GAoDvB,SAASE,EAAOH,EAAQC,EAAMG,GAC1BJ,EAAOK,aAAaJ,EAAMG,GAAU,MAUxC,SAASE,EAAOL,GACZA,EAAKM,WAAWC,YAAYP,GAQhC,SAASQ,EAAQC,GACb,OAAOC,SAASC,cAAcF,GAiBlC,SAASG,EAAYH,GACjB,OAAOC,SAASG,gBAAgB,6BAA8BJ,GAElE,SAASK,EAAKC,GACV,OAAOL,SAASM,eAAeD,GAEnC,SAASE,IACL,OAAOH,EAAK,KAEhB,SAASI,IACL,OAAOJ,EAAK,IAEhB,SAASK,EAAOnB,EAAMoB,EAAOC,EAASC,GAElC,OADAtB,EAAKuB,iBAAiBH,EAAOC,EAASC,GAC/B,IAAMtB,EAAKwB,oBAAoBJ,EAAOC,EAASC,GA8B1D,SAASG,EAAKzB,EAAM0B,EAAWC,GACd,MAATA,EACA3B,EAAK4B,gBAAgBF,GAChB1B,EAAK6B,aAAaH,KAAeC,GACtC3B,EAAK8B,aAAaJ,EAAWC,GAqLrC,SAASI,EAASjB,EAAMC,GACpBA,EAAO,GAAKA,EACRD,EAAKkB,YAAcjB,IACnBD,EAAKC,KAAOA,GA4FpB,SAASkB,EAAazB,EAASC,EAAMyB,GACjC1B,EAAQ2B,UAAUD,EAAS,MAAQ,UAAUzB,GAgNjD,IAAI2B,EACJ,SAASC,EAAsB7E,GAC3B4E,EAAoB5E,EAExB,SAAS8E,IACL,IAAKF,EACD,MAAM,IAAIG,MAAM,oDACpB,OAAOH,EAcX,SAASI,IACL,MAAMhF,EAAY8E,IAClB,MAAO,CAACG,EAAMC,KACV,MAAM5E,EAAYN,EAAUG,GAAGG,UAAU2E,GACzC,GAAI3E,EAAW,CAGX,MAAMsD,EA1OlB,SAAsBqB,EAAMC,EAAQC,GAAU,GAC1C,MAAMC,EAAIlC,SAASmC,YAAY,eAE/B,OADAD,EAAEE,gBAAgBL,EAAME,GAAS,EAAOD,GACjCE,EAuOeG,CAAaN,EAAMC,GACjC5E,EAAUU,QAAQvB,SAAQN,IACtBA,EAAGqG,KAAKxF,EAAW4D,QA4BnC,MAAM6B,EAAmB,GAEnBC,EAAoB,GACpBC,EAAmB,GACnBC,EAAkB,GAClBC,EAAmBC,QAAQC,UACjC,IAAIC,GAAmB,EAWvB,SAASC,EAAoB9G,GACzBwG,EAAiBtF,KAAKlB,GAE1B,SAAS+G,EAAmB/G,GACxByG,EAAgBvF,KAAKlB,GAEzB,IAAIgH,GAAW,EACf,MAAMC,EAAiB,IAAIC,IAC3B,SAASC,IACL,IAAIH,EAAJ,CAEAA,GAAW,EACX,EAAG,CAGC,IAAK,IAAIzE,EAAI,EAAGA,EAAI+D,EAAiBhE,OAAQC,GAAK,EAAG,CACjD,MAAM1B,EAAYyF,EAAiB/D,GACnCmD,EAAsB7E,GACtBuG,EAAOvG,EAAUG,IAIrB,IAFA0E,EAAsB,MACtBY,EAAiBhE,OAAS,EACnBiE,EAAkBjE,QACrBiE,EAAkBc,KAAlBd,GAIJ,IAAK,IAAIhE,EAAI,EAAGA,EAAIiE,EAAiBlE,OAAQC,GAAK,EAAG,CACjD,MAAMxB,EAAWyF,EAAiBjE,GAC7B0E,EAAeK,IAAIvG,KAEpBkG,EAAeM,IAAIxG,GACnBA,KAGRyF,EAAiBlE,OAAS,QACrBgE,EAAiBhE,QAC1B,KAAOmE,EAAgBnE,QACnBmE,EAAgBY,KAAhBZ,GAEJI,GAAmB,EACnBG,GAAW,EACXC,EAAeO,SAEnB,SAASJ,EAAOpG,GACZ,GAAoB,OAAhBA,EAAGyG,SAAmB,CACtBzG,EAAGoG,SACHhH,EAAQY,EAAG0G,eACX,MAAM3F,EAAQf,EAAGe,MACjBf,EAAGe,MAAQ,EAAE,GACbf,EAAGyG,UAAYzG,EAAGyG,SAAS3E,EAAE9B,EAAGS,IAAKM,GACrCf,EAAG2G,aAAarH,QAAQwG,IAiBhC,MAAMc,EAAW,IAAIV,IACrB,IAAIW,EACJ,SAASC,IACLD,EAAS,CACLE,EAAG,EACHC,EAAG,GACHlF,EAAG+E,GAGX,SAASI,IACAJ,EAAOE,GACR3H,EAAQyH,EAAOG,GAEnBH,EAASA,EAAO/E,EAEpB,SAASoF,EAAcC,EAAOC,GACtBD,GAASA,EAAM5F,IACfqF,EAASS,OAAOF,GAChBA,EAAM5F,EAAE6F,IAGhB,SAASE,EAAeH,EAAOC,EAAO1E,EAAQ3C,GAC1C,GAAIoH,GAASA,EAAMI,EAAG,CAClB,GAAIX,EAASN,IAAIa,GACb,OACJP,EAASL,IAAIY,GACbN,EAAOG,EAAE9G,MAAK,KACV0G,EAASS,OAAOF,GACZpH,IACI2C,GACAyE,EAAMK,EAAE,GACZzH,QAGRoH,EAAMI,EAAEH,IAuThB,MAAMK,EAA6B,oBAAXC,OAClBA,OACsB,oBAAfC,WACHA,WACAC,OAyGV,SAASC,EAAkBC,EAAQC,GAC/B,MAAM3B,EAAS,GACT4B,EAAc,GACdC,EAAgB,CAAEvH,QAAS,GACjC,IAAIa,EAAIuG,EAAOxG,OACf,KAAOC,KAAK,CACR,MAAMgG,EAAIO,EAAOvG,GACX2G,EAAIH,EAAQxG,GAClB,GAAI2G,EAAG,CACH,IAAK,MAAMC,KAAOZ,EACRY,KAAOD,IACTF,EAAYG,GAAO,GAE3B,IAAK,MAAMA,KAAOD,EACTD,EAAcE,KACf/B,EAAO+B,GAAOD,EAAEC,GAChBF,EAAcE,GAAO,GAG7BL,EAAOvG,GAAK2G,OAGZ,IAAK,MAAMC,KAAOZ,EACdU,EAAcE,GAAO,EAIjC,IAAK,MAAMA,KAAOH,EACRG,KAAO/B,IACTA,EAAO+B,QAAOlH,GAEtB,OAAOmF,EAEX,SAASgC,EAAkBC,GACvB,MAA+B,iBAAjBA,GAA8C,OAAjBA,EAAwBA,EAAe,GAqJtF,SAASC,EAAKzI,EAAWiD,EAAM/C,GAC3B,MAAMwI,EAAQ1I,EAAUG,GAAGiC,MAAMa,QACnB7B,IAAVsH,IACA1I,EAAUG,GAAGwI,MAAMD,GAASxI,EAC5BA,EAASF,EAAUG,GAAGS,IAAI8H,KAGlC,SAASE,EAAiBtB,GACtBA,GAASA,EAAMH,IAKnB,SAAS0B,EAAgB7I,EAAWuC,EAAQI,EAAQmG,GAChD,MAAMlC,SAAEA,EAAQmC,SAAEA,EAAQ3I,WAAEA,EAAU0G,aAAEA,GAAiB9G,EAAUG,GACnEyG,GAAYA,EAASoC,EAAEzG,EAAQI,GAC1BmG,GAED7C,GAAoB,KAChB,MAAMgD,EAAiBF,EAASG,IAAIhK,GAAKiK,OAAOzJ,GAC5CU,EACAA,EAAWC,QAAQ4I,GAKnB1J,EAAQ0J,GAEZjJ,EAAUG,GAAG4I,SAAW,MAGhCjC,EAAarH,QAAQwG,GAEzB,SAASmD,GAAkBpJ,EAAWqJ,GAClC,MAAMlJ,EAAKH,EAAUG,GACD,OAAhBA,EAAGyG,WACHrH,EAAQY,EAAGC,YACXD,EAAGyG,UAAYzG,EAAGyG,SAASe,EAAE0B,GAG7BlJ,EAAGC,WAAaD,EAAGyG,SAAW,KAC9BzG,EAAGS,IAAM,IAGjB,SAAS0I,GAAWtJ,EAAW0B,IACI,IAA3B1B,EAAUG,GAAGe,MAAM,KACnBuE,EAAiBpF,KAAKL,GAxvBrBgG,IACDA,GAAmB,EACnBH,EAAiB0D,KAAKjD,IAwvBtBtG,EAAUG,GAAGe,MAAMsI,KAAK,IAE5BxJ,EAAUG,GAAGe,MAAOQ,EAAI,GAAM,IAAO,GAAMA,EAAI,GAEnD,SAAS+H,GAAKzJ,EAAW8D,EAAS4F,EAAUC,EAAiBC,EAAWxH,EAAOyH,EAAe3I,EAAQ,EAAE,IACpG,MAAM4I,EAAmBlF,EACzBC,EAAsB7E,GACtB,MAAMG,EAAKH,EAAUG,GAAK,CACtByG,SAAU,KACVhG,IAAK,KAELwB,MAAAA,EACAmE,OAAQ1H,EACR+K,UAAAA,EACAjB,MAAOvJ,IAEP2J,SAAU,GACV3I,WAAY,GACZ2J,cAAe,GACflD,cAAe,GACfC,aAAc,GACdkD,QAAS,IAAIC,IAAInG,EAAQkG,UAAYF,EAAmBA,EAAiB3J,GAAG6J,QAAU,KAEtF1J,UAAWlB,IACX8B,MAAAA,EACAgJ,YAAY,EACZC,KAAMrG,EAAQvB,QAAUuH,EAAiB3J,GAAGgK,MAEhDN,GAAiBA,EAAc1J,EAAGgK,MAClC,IAAIC,GAAQ,EAkBZ,GAjBAjK,EAAGS,IAAM8I,EACHA,EAAS1J,EAAW8D,EAAQ1B,OAAS,IAAI,CAACV,EAAG2I,KAAQC,KACnD,MAAMnG,EAAQmG,EAAK7I,OAAS6I,EAAK,GAAKD,EAOtC,OANIlK,EAAGS,KAAOgJ,EAAUzJ,EAAGS,IAAIc,GAAIvB,EAAGS,IAAIc,GAAKyC,MACtChE,EAAG+J,YAAc/J,EAAGwI,MAAMjH,IAC3BvB,EAAGwI,MAAMjH,GAAGyC,GACZiG,GACAd,GAAWtJ,EAAW0B,IAEvB2I,KAET,GACNlK,EAAGoG,SACH6D,GAAQ,EACR7K,EAAQY,EAAG0G,eAEX1G,EAAGyG,WAAW+C,GAAkBA,EAAgBxJ,EAAGS,KAC/CkD,EAAQvB,OAAQ,CAChB,GAAIuB,EAAQyG,QAAS,CAEjB,MAAMC,EAvxClB,SAAkBxH,GACd,OAAOyH,MAAMC,KAAK1H,EAAQ2H,YAsxCJC,CAAS9G,EAAQvB,QAE/BpC,EAAGyG,UAAYzG,EAAGyG,SAASiE,EAAEL,GAC7BA,EAAM/K,QAAQoD,QAId1C,EAAGyG,UAAYzG,EAAGyG,SAASO,IAE3BrD,EAAQgH,OACRzD,EAAcrH,EAAUG,GAAGyG,UAC/BiC,EAAgB7I,EAAW8D,EAAQvB,OAAQuB,EAAQnB,OAAQmB,EAAQgF,eAEnExC,IAEJzB,EAAsBiF,GAkD1B,MAAMiB,GACFC,WACI5B,GAAkB6B,KAAM,GACxBA,KAAKD,SAAWnM,EAEpBqM,IAAIjG,EAAM/E,GACN,MAAMI,EAAa2K,KAAK9K,GAAGG,UAAU2E,KAAUgG,KAAK9K,GAAGG,UAAU2E,GAAQ,IAEzE,OADA3E,EAAUD,KAAKH,GACR,KACH,MAAMwI,EAAQpI,EAAU6K,QAAQjL,IACjB,IAAXwI,GACApI,EAAU8K,OAAO1C,EAAO,IAGpC2C,KAAKC,GAtzDT,IAAkBC,EAuzDNN,KAAKO,QAvzDCD,EAuzDkBD,EAtzDG,IAA5BjM,OAAOoM,KAAKF,GAAK9J,UAuzDhBwJ,KAAK9K,GAAG+J,YAAa,EACrBe,KAAKO,MAAMF,GACXL,KAAK9K,GAAG+J,YAAa,uDCl1DrBtJ,cAAR8B,iCAAQ9B,iDADLA,qMADP8B,6DACO9B,gSAhBM8K,EAAQ,iBACRC,qTCEHjJ,+EADgC9B,sMAAAA,yZCatC8B,yOADG9B,kFALkBA,+UAHzB8B,SACEJ,OACEA,iBAA6D1B,YAC7D0B,qBACAA,uGAF6D1B,qBACxCA,sDAKlBA,ySAZM8K,aACAE,GAAS,uIAK2CA,mQC+C3BhL,KAAW,SAASA,KAAW,6EAJjDA,gBAFpB8B,SAMEJ,qEAXc1B,OAAAA,+DACFA,OAAAA,iEACEA,OAAAA,gEACDA,OAAAA,8CAKCA,uBACCA,uIAEqBA,KAAW,SAASA,KAAW,uDAJjDA,6HAfpBiL,EACAC,EACAC,EACAC,qCAvCAC,EAAA,sBACAC,GAAA,EAAA,eAMAC,EAAA/G,GACAA,EAAAgH,qBACAF,GAAA9G,EAAAiH,QAAAC,EAAA,GAAAlH,EAAAmH,QAAAD,EAAA,KACApJ,SAAAsJ,KAAAC,MAAAC,OAAA,oBAEAC,QACAd,OAAAzK,OACA0K,OAAA1K,GACA8B,SAAAsJ,KAAAC,MAAAC,OAAA,GACAxJ,SAAAsJ,KAAAnI,aAAA,UACAnB,SAAAsJ,KAAApI,gBAAA,kBASAwI,EAAAxH,OACA8G,GACA9G,EAAAyH,QAAA,GAAAR,QAAAC,EAAA,GACAlH,EAAAyH,QAAA,GAAAN,QAAAD,EAAA,cAGAQ,QACAf,OAAA3K,OACA4K,OAAA5K,OAMAkL,GAAA,EAAA,iJAtCAlH,GACAkH,GAAAlH,EAAAiH,QAAAH,EAAA,GAAA9G,EAAAmH,QAAAL,EAAA,QACAL,EAAAM,OACAL,EAAAa,aAcAvH,eACA2H,GAAA,QAAAC,EAAA5H,EAAAyH,QAAA,cAAAG,SAAAA,EAAAX,UAAA,EACAY,GAAA,QAAAC,EAAA9H,EAAAyH,QAAA,cAAAK,SAAAA,EAAAX,UAAA,EACAD,GAAAS,EAAAb,EAAA,GAAAe,EAAAf,EAAA,QACAH,EAAAa,OACAZ,EAAAc,8PCrBApK,4PAHakJ,GAAS,sRCGZlJ,+EADgC9B,sMAAAA,qbCChC8B,+EADgC9B,sMAAAA,6VCChC8B,+EADgC9B,sMAAAA,+WCChC8B,+EADgC9B,sMAAAA,mXCChC8B,+EADgC9B,sMAAAA,0hBCONA,uDAGCA,gJALrC8B,SACEJ,OACEA,6BAGAA,qHAHgC1B,uFAGCA,mLAZrCuM,aACAlB,EAAAkB,eACAC,GAAA,KAEAX,YAAAU,cAAAlB,udC2BMvJ,SACEJ,8UAGFI,SACEJ,6UAOFI,SACEJ,8UAGFI,SACEJ,iNAlB+B1B,uFAYAA,mXAdvC8B,SACEJ,0BAYAA,0BAYAA,OACEA,2CAzB4B1B,kBAYAA,kBAYAA,mDAvBOA,8EAYAA,gRApBvCyM,WACAC,WAEAC,EAAAvI,kHAdAqI,GAAAA,mBAIAC,GAAAA,eAIAC,EAAA,kGCjBO,SAASC,GAAQC,EAAQC,EAAKC,EAAOpM,KAAKqM,QAC7C,OAAOrM,KAAKsM,MAJT,SAAmBJ,EAAQC,EAAKC,EAAOpM,KAAKqM,QAC/C,OAAOD,KAAUD,EAAMD,GAAUA,EAGfK,CAAUL,EAAQC,EAAKC,IAKtC,SAASI,GAAUC,EAAKxM,EAAKyM,GAChC,OAAOA,GAAUD,EACXC,EAASzM,EACTA,IAAQyM,EAASzM,EAQpB,SAAS0M,GAAKrO,EAAGC,EAAGqO,GACvB,OAAOtO,GAAKC,EAAID,GAAKsO,ECpBlB,MAAMC,GACTC,YAAYlB,EAAOlB,GACfhB,KAAKkC,MAAQA,EACblC,KAAKgB,OAASA,EACdhB,KAAKqD,MAAQ,IAAI7D,MAAM0C,GACvB,IAAK,IAAIJ,EAAI,EAAGA,EAAII,EAAOJ,IACvB9B,KAAKqD,MAAMvB,GAAK,IAAItC,MAAMwB,GAAQzC,UAAKpI,GAG/CmN,UAAUxB,EAAGE,GACT,MAAO,CACHc,GAAU,EAAG9C,KAAKkC,MAAOJ,GACzBgB,GAAU,EAAG9C,KAAKgB,OAAQgB,IAGlCuB,aACI,MAAO,CACHhB,GAAQ,EAAGvC,KAAKkC,OAChBK,GAAQ,EAAGvC,KAAKgB,SAGxBwC,YACI,IAAIC,EACJ,GACIA,EAASzD,KAAKuD,mBACTvD,KAAK0D,OAAOD,IACrB,OAAOA,EAEXlF,KAAKrF,GAED,OADA8G,KAAKqD,MAAMpF,KAAI0F,GAAUA,EAAOpF,KAAKrF,KAC9B8G,KAEX0D,IAAI5B,EAAGE,GACH,OAAOhC,KAAKqD,MAAMvB,GAAGE,GAEzB4B,MAAM9B,EAAGE,EAAG9I,GACR,MAAM2K,EAAO7D,KAAKqD,MAAMvB,GAAGE,GAC3B,YAAgB7L,IAAT0N,EACDA,EACA3K,EAEV4K,IAAIhC,EAAGE,EAAG9I,GACN8G,KAAKqD,MAAMvB,GAAGE,GAAK9I,EAEvB6K,OAAOjC,EAAGE,UACChC,KAAKqD,MAAMvB,GAAGE,GAEzBgC,KAAKlC,EAAGE,EAAGiC,EAAIC,GACX,MAAMC,EAAUnE,KAAK0D,IAAI5B,EAAGE,GACtBoC,EAAUpE,KAAK0D,IAAIO,EAAIC,GAC7BlE,KAAK8D,IAAIhC,EAAGE,EAAGoC,GACfpE,KAAK8D,IAAIG,EAAIC,EAAIC,GAErB3P,QAAQ6P,GACJ,IAAK,IAAIvC,EAAI,EAAGA,EAAI9B,KAAKkC,MAAOJ,IAC5B,IAAK,IAAIE,EAAI,EAAGA,EAAIhC,KAAKgB,OAAQgB,IAC7BqC,EAAKrE,KAAK0D,IAAI5B,EAAGE,GAAIF,EAAGE,GAIpC/D,IAAIoG,GACA,MAAMC,EAAO,IAAInB,GAAKnD,KAAKkC,MAAOlC,KAAKgB,QAIvC,OAHAhB,KAAKxL,SAAQ,CAAC0E,EAAO4I,EAAGE,KACpBsC,EAAKR,IAAIhC,EAAGE,EAAGqC,EAAKnL,EAAO4I,EAAGE,OAE3BsC,EAEXC,OACI,OAAO/E,MAAMgF,UAAUC,OAAOC,MAAM,GAAI1E,KAAKqD,QCrE9C,MAAMsB,WAAeC,UACxBxB,YAAYlB,EAAOlB,GACf6D,MAAM3C,EAAOlB,GAEjB8D,SAAShD,EAAGE,EAAG/F,EAAG8I,EAAGlQ,EAAGD,GACpB,MAAMoQ,EAAiC,GAAtBlD,EAAIE,EAAIhC,KAAKkC,OAK9B,OAJAlC,KAAK1H,KAAK0M,GAAW/I,EACrB+D,KAAK1H,KAAK0M,EAAU,GAAKD,EACzB/E,KAAK1H,KAAK0M,EAAU,GAAKnQ,EACzBmL,KAAK1H,KAAK0M,EAAU,GAAKpQ,EAClBoL,KAEXiF,SAASnD,EAAGE,GACR,MAAMgD,EAAiC,GAAtBlD,EAAIE,EAAIhC,KAAKkC,OAC9B,MAAO,CACHlC,KAAK1H,KAAK0M,GACVhF,KAAK1H,KAAK0M,EAAU,GACpBhF,KAAK1H,KAAK0M,EAAU,GACpBhF,KAAK1H,KAAK0M,EAAU,wFCMhCvN,+EAlBAyN,aAHAC,gBACAC,EAAA,KhB86BA,IAAqBlR,SAAAA,WgBz6BrBgR,EAAAhD,MAAAiD,EAAAjD,MAAAkD,SACAF,EAAAlE,OAAAmE,EAAAnE,OAAAoE,WACAzP,EAAAuP,EAAAG,WAAA,UACA1P,SACAA,EAAA2P,uBAAA,QACAC,EAAAtN,SAAAC,cAAA,UACAqN,EAAArD,MAAAiD,EAAAjD,MACAqD,EAAAvE,OAAAmE,EAAAnE,aACAwE,EAAAD,EAAAF,WAAA,MACAG,IACAA,EAAAC,aAAAN,EAAA,EAAA,GACAxP,EAAA+P,UAAAH,EAAA,EAAA,EAAAL,EAAAhD,MAAAgD,EAAAlE,UhB+5BInH,IAAwB3E,GAAG2G,aAAazG,KAAKlB,uIgB35B9BgR,yGCvBZ,MAAMS,GACTvC,YAAYwC,EAAKC,EAAOC,EAAMC,GAC1B/F,KAAK4F,IAAMA,EACX5F,KAAK6F,MAAQA,EACb7F,KAAK8F,KAAOA,EACZ9F,KAAK+F,MAAQA,EAEjBC,eAAetD,EAAOpM,KAAKqM,QACvB,OAAO,IAAIgD,GAAKpD,GAAQ,EAAG,IAAKG,GAAOH,GAAQ,EAAG,IAAKG,GAAOH,GAAQ,EAAG,IAAKG,GAAO,KAEzFuD,YAAYC,EAAOhD,EAAGhP,EAAK+O,IACvB,OAAO,IAAI0C,GAAKzR,EAAG8L,KAAK4F,IAAKM,EAAMN,IAAK1C,GAAIhP,EAAG8L,KAAK6F,MAAOK,EAAML,MAAO3C,GAAIhP,EAAG8L,KAAK8F,KAAMI,EAAMJ,KAAM5C,GAAIhP,EAAG8L,KAAK+F,MAAOG,EAAMH,MAAO7C,IAE1IiD,UACI,MAAO,CAACnG,KAAK4F,IAAK5F,KAAK6F,MAAO7F,KAAK8F,KAAM9F,KAAK+F,QAGtDJ,GAAKS,QAAU,KCdR,MAAMC,WAAclD,GACvBC,YAAYlB,EAAOlB,GACf6D,MAAM3C,EAAOlB,IAGd,MAAMsF,WAAoBD,GAC7BE,OACI,MAAMC,EAAS,GACfxG,KAAKxL,SAAQ,CAAC0E,EAAO4I,EAAGE,KACf9I,GAELsN,EAAOpR,KAAK,CAAEiH,MAAOnD,EAAOuN,IAAK,CAAC3E,EAAGE,QAExBwE,EAAOE,MAAK,IAAMpQ,KAAKqM,SAAW,KAC1CnO,SAAQ,EAAG6H,MAAAA,EAAOoK,IAAAA,KAAUpK,EAAMsK,KAAKF,EAAKzG,QAEzD4G,YACI,MAAMC,EAAS,IAAIlC,GAAO3E,KAAKkC,MAAOlC,KAAKgB,QAO3C,OANAhB,KAAKxL,SAAQ,CAAC6H,EAAOyF,EAAGE,KACf3F,GAELwK,EAAO/B,SAAShD,EAAGE,MAAO3F,EAAMyK,YAAc,IAAInB,GAAK,EAAG,EAAG,EAAG,IAC3DQ,cAEFU,EAEXE,oBACI,MAAO,CAAE5B,UAAWnF,KAAK4G,YAAaxB,UAAW,GAErD4B,eACI,OAAOC,ICjCR,MAAMC,GACT9D,cACIpD,KAAKmH,KAAOxB,GAAKyB,UAErBT,KAAKF,EAAKY,GACN,MAAM5D,EAAS4D,EAAM/D,UAAUmD,EAAI,GAAIA,EAAI,GAAK,GACpCY,EAAM3D,OAAOD,IACdnN,KAAKqM,SAAW,IAE3B0E,EAAMrD,QAAQyC,KAAQhD,GAE1BqD,WACI,OAAO9G,KAAKmH,MCVpB,MAAMG,GAAmB,wDC+D+B3R,YAA1BA,KAAMqR,mNAAoBrR,qBAA1BA,KAAMqR,slBAM9BvP,+FASmD,iDADnDA,SACGJ,iBAAqC1B,mEAAAA,yVAX1C8B,oEAAkB9B,ieADHA,8GAgB4BA,cAAAA,wGAAgBA,8JArBfA,kDAD1BA,cAAtB8B,SACEJ,kLAA8C1B,gCAK7BA,yIAgB4BA,kDAtBzBA,uMA1CtB4R,GAAAC,GACAA,GAAA5K,OAAA6K,cAAAD,qCAXAjB,IACAc,EAAAd,WACAmB,EAAAL,EAAAN,yBAsBA3E,GAAA,EACAoF,EAAA,KACAnF,EDlBA,SAAkBnJ,EAAOyO,EAAQ/T,GAC7B,IAAIgU,EACJ,MAAMC,EAAc,IAAIzM,IACxB,SAAS0I,EAAIgE,GACT,GAAInT,EAAeuE,EAAO4O,KACtB5O,EAAQ4O,EACJF,GAAM,CACN,MAAMG,GAAaT,GAAiB9Q,OACpC,IAAK,MAAMwR,KAAcH,EACrBG,EAAW,KACXV,GAAiBlS,KAAK4S,EAAY9O,GAEtC,GAAI6O,EAAW,CACX,IAAK,IAAItR,EAAI,EAAGA,EAAI6Q,GAAiB9Q,OAAQC,GAAK,EAC9C6Q,GAAiB7Q,GAAG,GAAG6Q,GAAiB7Q,EAAI,IAEhD6Q,GAAiB9Q,OAAS,IAuB1C,MAAO,CAAEsN,IAAAA,EAAKxI,OAlBd,SAAgBpH,GACZ4P,EAAI5P,EAAGgF,KAiBW3D,UAftB,SAAmBtB,EAAKgU,EAAarU,GACjC,MAAMoU,EAAa,CAAC/T,EAAKgU,GAMzB,OALAJ,EAAYpM,IAAIuM,GACS,IAArBH,EAAYK,OACZN,EAAOD,EAAM7D,IAAQlQ,GAEzBK,EAAIiF,GACG,KACH2O,EAAYtL,OAAOyL,GACM,IAArBH,EAAYK,OACZN,IACAA,EAAO,SCjBvBO,EAAA,wBACA9F,EAAA9M,sBAZA6S,EACAZ,EAAA5K,OAAAyL,kBACA9B,MACA,IAAA,IAEAgB,GAAAC,UASAH,MAAAf,GAAA,IAAA,aACAtE,EAAA,EAAAA,EAAAqF,EAAArG,OAAAgB,YACAF,EAAA,EAAAA,EAAAuF,EAAAnF,MAAAJ,IACAxL,KAAAqM,SAAA,IAAA0E,EAAAvD,IAAAhC,EAAAE,MAAAkF,QAGAQ,EAAAL,EAAAN,oBAEAuB,GAAA,ErBq4BA,IAAmBpU,EAAAA,EqBn4BnBqT,GAAA/J,KAAA,KAAAgK,GrBo4BI3N,IAAwB3E,GAAGC,WAAWC,KAAKlB,6BAjyB/C,IAAqCgF,EqBpIrCqN,IACA6B,GAAA,ErBmIqClP,MAC3B4K,IAAI5K,aqB/FQ0D,OAAO2L,WAAW,4BAA4BC,QAE9DvQ,SAASsJ,KAAK7H,UAAU+B,IAAI,UAE5BxD,SAASsJ,KAAK7H,UAAUqK,OAAO,sBAsBSuE,2DAICF,sBCpFhC,oEAAQ,CAAE9Q,OAAQW,SAASsJ"}